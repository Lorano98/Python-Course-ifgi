# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FirescopeDialog
                                 A QGIS plugin
 This plugin helps the firefighters of Muenster to capture fires and manage the organization of firetrucks
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-07-18
        git sha              : $Format:%H$
        copyright            : (C) 2024 by spacey
        email                : staskiewicz.anne@uni-muenster.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject
from qgis.utils import iface
from qgis.PyQt.QtWidgets import QComboBox

from .Brandverwaltung import Ui_Dialog as Brandverwaltung
from .Branderfassung import Ui_Dialog as Branderfassung
from .Fahrzeugverwaltung import Ui_Dialog as Fahrzeugverwaltung

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'BrandMainWidget.ui'))
    
# Get the district layer from the map
layer_strassen = QgsProject.instance().mapLayersByName("Strassen")[0]
parent = iface.mainWindow()

class BranderfassungDialog(QtWidgets.QDialog, Branderfassung):
    def __init__(self, parent=None):
        super(BranderfassungDialog, self).__init__(parent)
        self.setupUi(self)

        #strassen_liste = []
        #for f in layer_strassen.getFeatures():
        #    strassen_liste.append(f["NAME"])
        #    
        #print(strassen_liste)
        
        #print(self.ComboBoxStrasse)

class BrandverwaltungDialog(QtWidgets.QDialog, Brandverwaltung):
    def __init__(self, parent=None):
        super(BrandverwaltungDialog, self).__init__(parent)
        self.setupUi(self)

class Fahrzeugverwaltung(QtWidgets.QDialog, Fahrzeugverwaltung):
    def __init__(self, parent=None):
        super(Fahrzeugverwaltung, self).__init__(parent)
        self.setupUi(self)
        
def openBranderfassung(self):
    dialog = BranderfassungDialog()
    dialog.exec_()

def openBrandverwaltung(self):
    dialog = BrandverwaltungDialog()
    dialog.exec_()

def openFahrzeugverwaltung(self):
    dialog = Fahrzeugverwaltung()
    dialog.exec_()

class FirescopeDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(FirescopeDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.pushButtonFeuerVerwalten.clicked.connect(openBrandverwaltung)
        self.pushButtonFeuerAnlegen.clicked.connect(openBranderfassung)
        self.pushButtonFahrzeugeVerwalten.clicked.connect(openFahrzeugverwaltung)
